// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: account_entry.sql

package db

import (
	"context"
	"time"
)

const account_entry = `-- name: account_entry :many
SELECT 
accounts.id, 
accounts.owner, 
entries.amount, 
entries.created_at 
FROM accounts INNER JOIN entries 
ON accounts.id = entries.account_id 
ORDER BY accounts.id
`

type account_entryRow struct {
	ID        int64     `json:"id"`
	Owner     string    `json:"owner"`
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) account_entry(ctx context.Context) ([]account_entryRow, error) {
	rows, err := q.db.QueryContext(ctx, account_entry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []account_entryRow{}
	for rows.Next() {
		var i account_entryRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
